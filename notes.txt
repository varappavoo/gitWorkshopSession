mkdir gitWorkshopSession
cd gitWorkshopSession

git init
 	used to create a new git repository

git config --global user.name "Vara Appavoo"
git config --global user.email "p.appavoo@gmail.com"
git config --global --add color.ui true
git config --global core.editor "nano"
touch notes.txt
 

git status
 	tells us the status of the working directory
 	###
	git status
	shows the differences between the Working Drectory and the Staging area
	and the differences between the Staging area and the Repository
	###

.gitignore 
	a file in your git folder that is created to contain all file that will be ignored by git
	* 	echo passwords.txt > .gitignore
 	*	.gitignore contains files that will be ignored by git

git add [file]
 	tells git to start tracking specific files or folders
	###
	After modifying a file:
	[do a git status]
	do a git add...
	[do a git status]
	do a git commit
	###

git commit
 	commit the changes that were made
 	the chosen editor will pop up to allow you to add a comment for this commit
 	###
	Commit messages:
	Present tense
	Why is this necessary
	50/72 rules - message description between 50 and 70 chars
	###
 	###
	Commits path:
	1. Working directory - directory where one is working with all files
	2. Staging area - after a git add, not yet committed
	3. Repository - after committing from a staging area
	###
	NB Modifications made after a staging are not part of the commit
	###

git log
 	shows us all the commit that were made

git log --oneline
	shows us a summary of the git commit history

git diff old new
	shows us the change between two commits

git diff
	shows us the differences between the Staging area and Working directory

git add -p
	patch mode - let selectively stage the change

### to be used carefully
git reset --hard
	clean the working directory to match what the repository
	useful after a patching 

### move across time
git checkout [branch name/commit_hash/etc] # that's HEAD
	switches to that branch/commit/etc

### to get back to the actual time
git checkout master
